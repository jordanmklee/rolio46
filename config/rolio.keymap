/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

#define MACOS     0
#define FKEYS     1
#define NUMBERS   2
#define WINDOWS   3
#define W_FKEYS   4
#define W_NUMBERS 5
#define MATHS     6
#define KB_CONFIG 7

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    behaviors {
        // Toggle F-Keys Layer

        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&mo 0>, <&tog 0>, <&tog 0>;
        };

        // Toggle Numbers layer

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&mo 0>, <&tog 0>, <&tog 0>;
        };

        // Toggle capsword left

        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };

        // Toggle capsword right

        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RSHFT>, <&caps_word>;
        };

        // Toggle Windows layer

        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LGUI>, <&tog 0>;
        };

        // Toggle Windows layer

        td5: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_5";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RGUI>, <&tog 0>;
        };

        // Backspace a whole word when holding backspace

        backspace_word: backspace_word {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE_WORD";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&bsp_word>, <&kp>;
        };

        w_backspace_word: w_backspace_word {
            compatible = "zmk,behavior-hold-tap";
            label = "WINDOWS_BACKSPACE_WORD";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&w_bsp_word>, <&kp>;
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <38 39 40 41 42 30 1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 0 12 24>;
        };

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <43 44 45 46 47 6 7 8 9 10 11 18 19 20 21 22 23 32 33 34 35 36 37 31>;
        };

        //Mac OS Zoom
        //Windows OS Zoom
    };

    macros {
        unindent: unindent {
            label = "UNINDENT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_release>,
                <&kp LSHIFT>;
        };

        lstart: lstart {
            label = "Line_Start";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LGUI>;
        };

        lend: lend {
            label = "Line_End";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LGUI>;
        };

        scrsh: scrsh {
            label = "Screenshot";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&kp N3>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_release>,
                <&kp LGUI>;
        };

        scrcr: scrcr {
            label = "Screen_Crop";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&kp N4>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_release>,
                <&kp LGUI>;
        };

        wscrcr: wscrcr {
            label = "Windows_Screen_Crop";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&kp S>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_release>,
                <&kp LGUI>;
        };

        pal: pal {
            label = "Pallette";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LCTRL>,
                <&macro_release>,
                <&kp LGUI>;
        };

        wpal: wpal {
            label = "W_Pallette";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp DOT>,
                <&macro_release>,
                <&kp LGUI>;
        };

        // Word backspace macros

        bsp_word: bsp_word {
            label = "BSP_WORD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT>,
                <&macro_tap>,
                <&kp BSPC>,
                <&macro_release>,
                <&kp LALT>;
        };

        w_bsp_word: w_bsp_word {
            label = "W_BSP_WORD";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp BSPC>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        // Zoom macros

        zoom_in: zoom_in {
            label = "ZOOM_IN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp EQUAL>,
                <&macro_release>,
                <&kp LGUI>;
        };

        zoom_out: zoom_out {
            label = "ZOOM_OUT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp MINUS>,
                <&macro_release>,
                <&kp LGUI>;
        };

        reset_zoom: reset_zoom {
            label = "RESET_ZOOM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp N0>,
                <&macro_release>,
                <&kp LGUI>;
        };

        w_zoom_in: w_zoom_in {
            label = "WINDOWS_ZOOM_IN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp EQUAL>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        w_zoom_out: w_zoom_out {
            label = "WINDOWS_ZOOM_OUT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp MINUS>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        w_reset_zoom: w_reset_zoom {
            label = "WINDOWS_RESET_ZOOM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp N0>,
                <&macro_release>,
                <&kp LCTRL>;
        };

        alt_fkey_layer: layer_mod {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LALT &mo 6>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT &mo 6>;

            label = "LAYER_MOD";
        };
    };

    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kt LC(C)>;
            key-positions = <26 27>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <28 27>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <25 27>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "default";
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp LEFT RIGHT>;
            bindings = <
&kp TAB    &kp Q                 &kp W                 &kp E                     &kp R                   &kp T                         &kp Y      &kp U                     &kp I                       &kp O                   &kp P                     &kp BACKSPACE
&kp ESC    &hrm_left LEFT_GUI A  &hrm_left LEFT_ALT S  &hrm_left LEFT_CONTROL D  &hrm_left LEFT_SHIFT F  &kp G                         &kp H      &hrm_right RIGHT_SHIFT J  &hrm_right RIGHT_CONTROL K  &hrm_right RIGHT_ALT L  &hrm_right RIGHT_GUI SQT  &kp SEMI
&kp LSHFT  &kp Z                 &kp X                 &kp C                     &kp V                   &kp B           &to 5  &to 3  &kp N      &kp M                     &kp COMMA                   &kp DOT                 &kp FSLH                  &mt RSHFT ENTER
                                 &kp LGUI              &alt_fkey_layer           &kp LCTRL               &sk LEFT_SHIFT  &mo 1  &mo 3  &kp SPACE  &mo 2                     &kp RIGHT_CONTROL           &mo 6
            >;
        };

        Numbers {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN    &kp HASH      &kp DOLLAR  &kp PERCENT                     &kp N7     &kp N8  &kp N9   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp CARET        &kp AMPERSAND  &kp ASTERISK  &trans      &none                           &kp N4     &kp N5  &kp N6   &kp MINUS             &kp EQUAL              &trans
&trans  &trans           &trans         &trans        &trans      &trans       &soft_off  &trans  &kp N1     &kp N2  &kp N3   &trans                &trans                 &trans
                         &trans         &trans        &trans      &trans       &trans     &trans  &kp SPACE  &kp N0  &kp DOT  &trans
            >;

            label = "numbers";
        };

        Symbols {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &kp LEFT_BRACKET      &kp RBKT               &kp EQUAL  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans     &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                &trans
            >;

            label = "symbols";
        };

        Arrows {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                     &kp PAGE_UP    &kp HOME  &kp UP    &kp END    &mo 4   &trans
&trans  &trans  &trans  &trans  &trans  &trans                     &kp PAGE_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &soft_off  &trans         &trans    &trans    &trans     &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans     &trans         &trans    &trans    &trans
            >;

            label = "arrows";
        };

        Function {
            bindings = <
&bt BT_NXT  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4                   &trans  &trans  &kp HOME  &trans  &trans  &trans
&bt BT_PRV  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4                  &trans  &trans  &kp END   &trans  &trans  &trans
&none       &trans         &trans         &trans         &trans         &none          &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans
                           &bt BT_CLR     &trans         &trans         &trans         &trans  &trans  &trans  &trans  &trans    &trans
            >;

            label = "function";
        };

        test {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans     &to 0   &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &kp SPACE  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "test";
        };

        FKeys {
            bindings = <
&trans  &trans  &trans  &trans  &kp F4  &kp F5                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;

            label = "fkeys";
        };
    };
};
